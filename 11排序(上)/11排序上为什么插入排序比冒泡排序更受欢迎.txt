排序算法的执行效率

1、最好情况、最坏情况、平均情况的时间复杂度

2、时间复杂度的系数、常熟、低阶

3、比较次数和交换(或移动)次数

衡量排序算法的优劣：

1、排序算法的内存消耗
2、排序算法的稳定性

冒泡排序
//冒泡排序，a表示数组，n表示数组大小
public void bubbleSort(int[] a, int n){
	if(n<=1) return;
	
	for(int i=0;i<n;i++){
		//提前退出冒泡循环的标志位
		boolean flag = false;
		for(int j=0;j<n-1-i;;++j){
			if(a[j]>a[j+1]){
				int tmp = a[j];
				a[j] = a[j+1]
				a[j+1] = tmp;
				flag = true;//无数据交换
			}
		}
		if(!flag) break;//无数据交换，提前退出
	}
}
冒泡：1、空间复杂度O(1)，原地排序  2、稳定排序  3、最好O(n)  最坏O(n*n)

逆序度 = 满有序度-有序度


插入排序
//插入排序，a表示数组，n表示数组大小
public void insertionSort(int[] a, int n){
	if(n<=1) return;
	
	for(int i=1;i<n;++i){
		int value = a[i];
		int j = i - 1;
		//查找插入的位置
		for(;j>=0;--j){
			if(a[j] > value){
				a[j+1]=a[j];//数据移动
			}else{
				break;
			}
		}
		a[j+1] = value;//插入数据
	}
}

1、空间复杂度O(1)，原地排序
2、稳定排序
3、O(n*n)

选择排序是不稳定的排序

插入排序比冒泡排序的优势：交换操作次数不同


冒泡排序中数据的交换操作：
if (a[j] > a[j+1]) { // 交换
   int tmp = a[j];
   a[j] = a[j+1];
   a[j+1] = tmp;
   flag = true;
}

插入排序中数据的移动操作：
if (a[j] > value) {
  a[j+1] = a[j];  // 数据移动
} else {
  break;
}

插入排序的优化：希尔排序










































