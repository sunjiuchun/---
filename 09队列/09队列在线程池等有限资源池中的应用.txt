问题：
当我们向固定大小的线程池中请求一个线程时，
如果线程池中没有空闲资源了，这个时候线程池如何处理这个请求？
是拒绝请求还是排队请求？各种处理策略又是怎么实现的呢？

队列：先进者先出

入队enqueue():放一个数据到队列尾部
出队dequeue():从队列头部取一个元素

队列和栈一样，也是一种操作受限的线性表数据结构

用数组实现的队列叫做顺序队列，用链表实现的队列叫做链式队列。

//用数组实现的队列
public class ArrayQueue{
	//数组items,数组大小n
	private String[] items;
	private int n = 0;
	//head队列头下标 tail队列尾下标
	private int head = 0;
	private int tail = 0;
	
	//申请数组
	public ArrayQueue(int n){
		this.items = new String[n];
		this.n = n;
	}
	
	//入队
	public boolean enqueue(String item){
		if(tail==n) return false;//队满
		items[tail] = item;
		++tail;
		return true;
	}
	
	//出队dequeue
	public String dequeue(){
		if(head==tail) return null; 队列为空
		String tmp = items[head];
		++head;
		return ret;
	}
}	

如果没有空闲空间，需要在再次入队时，触发一次数据的搬移操作
改造enqueue()函数

public boolean enqueue(String item){
	if(tail==n){
		//tail==n&&head==0整个队列都满了
		if(head==0) return false;
		//此时head不为0,存在数据搬移的条件
		for(int i=head;i<tail;i++){
			items[i-head] = items[i];
		}
		//数据搬移后更新head和tail
		tail -= head;
		head = 0;
	}
	items[tail] = item;
	++tail;
	return true;
}

基于链表的队列实现方法
入队
tail->next = new_code;
tail = tail->next;
出队
head = head->next;

循环队列
判断队满的规律
(tail+1)%n = head;
(解释如下)
在一般情况下，我们可以看出来，
当队列满时，tail+1=head。
但是，有个特殊情况，就是tail=n-1，而head=0时，
这时候，tail+1=n，而head=0，所以用(tail+1)%n == n%n == 0。
而且，tail+1最大的情况就是 n ，
不会大于 n，这样，tail+1 除了最大情况，
不然怎么余 n 都是 tail+1 本身，
也就是 head。这样，表达式就出现了。



//循环队列代码
public class CircularQueue{
	private String[] items;
	private int n = 0;
	private int head = 0;
	private int tail = 0;
	
	public CircularQueue(int n){
		this.items = new String[n];
		this.n = n;
	}
	
	public boolean enqueue(String item){
		if((tail+1)%n==head) return false;
		items[tail] = item;
		tail = (tail + 1)%n;
		return true;
	}
	
	public String dequeue(){
		if(head==tail) return null;
		String ret = items[head];
		head = (head+1)%n;
		return ret;
	}
}

阻塞队列
简单来说，就是在队列为空的时候，从队头取数据会被阻塞。
因为此时还没有数据可取，直到队列中有了数据才能返回；
如果队列已经满了，那么插入数据的操作就会被阻塞，
直到队列中有空闲位置后再插入数据，然后再返回。

实际上就是生产者-消费者策略


并发队列
线程安全的队列

基于链表的实现方式，
可以实现一个支持无限排队的无界队列（unbounded queue），
但是可能会导致过多的请求排队等待，
请求处理的响应时间过长。
所以，针对响应时间比较敏感的系统，
基于链表实现的无限排队的线程池是不合适的。

而基于数组实现的有界队列（bounded queue），
队列的大小有限，所以线程池中排队的请求超过队列大小时，
接下来的请求就会被拒绝，
这种方式对响应时间敏感的系统来说，
就相对更加合理。不过，设置一个合理的队列大小，
也是非常有讲究的。队列太大导致等待的请求太多，
队列太小会导致无法充分利用系统资源、发挥最大性能。



三、链表实现
public class LinkedQueue {
	//定义一个节点类
	private class Node{
		String value;
		Node next;
	}
	//记录队列元素个数
	private int size = 0;
	//head指向队头结点，tail指向队尾节点
	private Node head;
	private Node tail;
	//申请一个队列
	public LinkedQueue(){}
	//入队
	public boolean enqueue(String item){
		Node newNode = new Node();
		newNode.value = item;
		if (size == 0) head = newNode;
		else tail.next = newNode;
		tail = newNode;
		size++;
		return true;
	}
	//出队
	public String dequeue(){
		String res = null;
		if(size == 0) return res;
		if(size == 1) tail = null;
		res = head.value;
		head = head.next;
		size--;
		return res;
	}
}


















