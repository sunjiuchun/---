一、理解指针或引用的含义
C/C++有指针，Java和Python是引用

二、警惕指针丢失和内存泄漏

三、利用哨兵节点
背景：针对链表的插入、删除操作，
需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。

代码1
//在数组a中，查找key，返回key所在的位置
//其中，n表示数组a的长度
int find(char *a, int n, char key){
	//边界条件处理，如果a为空，或者n<=0，说明数组中没有数据，就不用while循环比较了
	if(a==null||n<=0){
		return -1;
	}
	int i=0;
	//这里有两个比较操作：i<n和a[i]==key
	while(i<n){
		if(a[i]==key){
			return i;
		}
		++i;
	}
	return -1;
}
代码2
//在数组a中，查找key，返回key所在的位置
//其中，n表示数组a的长度
//a = {4,2,3,5,9,6} n=6 key=7
//a = {4,2,3,5,9,6} n=6 key=6

int find(char *a, int n, char key){
	if(a==null||a<0)
		return -1;
}

if(a[n-1]==key){
	return n-1;
}

char tmp = a[n-1];
a[n-1] = key;

int i = 0;
while(a[i]!=key)
	++i;
a[n-1] = tmp;
if(i==n-1){
	return -1;
}else{
	return i;
}


代码2执行效率更高，因为省略了i<n，但是可读性差

四、重点留意边界条件处理

1、链表为空  2、链表只有一个节点  3、链表只有两个节点  4、处理头尾节点

课后题：
· 单链表反转
· 链表中环的检测
· 两个有序的链表合并
· 删除链表倒数第n个节点
· 求链表的中间节点



单链表反转：(leetcode No.206)
暴力
class Solution{
public:
	ListNode *reverseList(ListNode *head){
		ListNode *cur = NULL, *pre = head;
		while(pre!=NULL)
			ListNode *t = pre->next;
			pre->next = cur;
			cur = pre;
			pre = t;
	}
	return cur;
}

链表中环的检测:(leetcode No.141)

两个有序的链表合并:(leetcode No.21)

删除链表倒数第n个节点:(leetcode No.19)

求链表的中间节点:(leetcode No.876)













